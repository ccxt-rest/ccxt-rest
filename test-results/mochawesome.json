{
  "stats": {
    "suites": 8,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-05T17:01:36.273Z",
    "end": "2021-06-05T17:01:36.795Z",
    "duration": 522,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "5ec3a511-a719-481a-8a11-7dca0c51b770",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "703027f0-9ccb-4a80-8292-917ea0ee240e",
        "title": "> controllers",
        "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
        "file": "/test/api/controllers/exchange.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "> controllers \"before all\" hook",
            "timedOut": false,
            "duration": 292,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (fs.existsSync('./out/database.sqlite3')) {\n  fs.unlinkSync('./out/database.sqlite3')\n}\nreturn new Promise((resolve) => {\n  ccxtServer.start(_server => {\n    server = _server\n    resolve();\n  })  \n})",
            "err": {},
            "isRoot": false,
            "uuid": "16733f4c-2418-463e-bd0d-be1a173864b2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "> controllers \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (server) {\n  server.close()\n}\nif (fs.existsSync('./out/database.sqlite3')) {\n  fs.unlinkSync('./out/database.sqlite3')\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fddb64c7-a650-497d-ad56-b1d345c3e2ea",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "6b41b878-1137-4bc2-829f-d188f951d5bc",
            "title": "> exchanges",
            "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
            "file": "/test/api/controllers/exchange.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a26d64d5-e3b8-4780-9445-085c32ce8dc0",
                "title": "> GET /exchanges",
                "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                "file": "/test/api/controllers/exchange.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "> should return list of exchanges",
                    "fullTitle": "> controllers > exchanges > GET /exchanges > should return list of exchanges",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(server)\n          .get('/exchanges')\n          .expect('Content-Type', /json/)\n          .expect(200)\n          .end(function(err, res) {\n            should.not.exist(err);\n            res.body.should.eql(exchangeConfig.exchanges.map(i => '' + i));\n            done();\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "207ff666-9c06-49bb-9e10-b0b6f26bf2d3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "207ff666-9c06-49bb-9e10-b0b6f26bf2d3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 29,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9a7b9e74-2016-423f-affd-41518f25da82",
            "title": "> exchange",
            "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
            "file": "/test/api/controllers/exchange.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "99425ff0-bfbe-4c40-a87c-11e1fee8688c",
                "title": "> Given unsupported exchange name",
                "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                "file": "/test/api/controllers/exchange.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "33b99952-26c5-4bcf-9a84-5018d55457a2",
                    "title": "> [Unsupported Exchange name] Exchange Management API",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange name] Exchange Management API > GET:/exchange/nonExistentExchangeName then return 404",
                        "timedOut": false,
                        "duration": 12,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .get('/exchange/nonExistentExchangeName')\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24e65173-d085-4e7e-92a6-bf989aaaf3cd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> POST:/exchange/nonExistentExchangeName then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange name] Exchange Management API > POST:/exchange/nonExistentExchangeName then return 404",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .post('/exchange/nonExistentExchangeName')\n  .send({id:'nonExistentExchangeName1'})\n  .set('Accept', 'application/json')\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fe296f58-60ab-453d-9cc7-2c1f3eceb9cf",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "24e65173-d085-4e7e-92a6-bf989aaaf3cd",
                      "fe296f58-60ab-453d-9cc7-2c1f3eceb9cf"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 31,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "ccef25dc-81d3-4280-87ef-89bc9cba7f0d",
                    "title": "> [Unsupported Exchange Name] Public Data API",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/markets then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/markets then return 404",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n              .get('/exchange/nonExistentExchangeName/markets')\n              .expect('Content-Type', /json/)\n              .expect(404)\n              .end((err, res) => {\n                should.not.exist(err);\n                done();\n              })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "31fa70ac-8c3b-49bf-9ec6-1ef46bb3f698",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/orderBook then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/orderBook then return 404",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS);\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/orderBook')\n    .query({ symbol: 'BTC/ETH' })\n    .set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "86c77c2e-f42f-47c2-9a14-61725c5107bc",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/l2OrderBook then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/l2OrderBook then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS);\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/l2OrderBook')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2eb66ddb-648e-4bb5-a713-b1e3913ee6e2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/trades then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/trades then return 404",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/trades')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "af66ab71-51a8-484a-bc0f-49de43b3d65f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/ticker then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/ticker then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/ticker')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fe296d88-3c2c-46b6-88e5-259a79323bcc",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/tickers then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/tickers then return 404",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/tickers')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c2706805-0470-46a3-b1e9-52fdc71becae",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> POST:/exchange/nonExistentExchangeName/_/loadMarkets then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > POST:/exchange/nonExistentExchangeName/_/loadMarkets then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .post('/exchange/nonExistentExchangeName/_/loadMarkets')\n    .type('text')\n    .send(JSON.stringify([true]))\n    .set('Accept', 'application/json')\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a4783859-2157-438f-aa42-bb43f0f78f99",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "31fa70ac-8c3b-49bf-9ec6-1ef46bb3f698",
                      "86c77c2e-f42f-47c2-9a14-61725c5107bc",
                      "2eb66ddb-648e-4bb5-a713-b1e3913ee6e2",
                      "af66ab71-51a8-484a-bc0f-49de43b3d65f",
                      "fe296d88-3c2c-46b6-88e5-259a79323bcc",
                      "c2706805-0470-46a3-b1e9-52fdc71becae",
                      "a4783859-2157-438f-aa42-bb43f0f78f99"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 41,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "58a0df1c-8713-48ab-ac54-5771350376a1",
                    "title": "> [Unsupported Exchange Name] Private Data APIs",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/balances then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > GET:/exchange/nonExistentExchangeName/balances then return 404",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/balances')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b9782a36-23b6-4268-b953-70d85341e120",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Place order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Place order then return 404",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .post('/exchange/nonExistentExchangeName/order')\n  .send({ symbol: 'BTC/ETH', type: 'limit', side: 'buy', amount:0, price:0 })\n  .set('Accept', 'application/json')\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "83c8da1d-500f-49dd-a69a-3b6cd130f781",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Cancel order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Cancel order then return 404",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .delete('/exchange/nonExistentExchangeName/order/dummy')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5f2562a7-230a-4928-8ec3-74607554f284",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get order then return 404",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/order/dummy')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "da5fa919-1b2e-4b85-b302-eb5cb11c1cba",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get orders then return 404",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a797f05e-5601-4563-b910-a6ebe8bc08b9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get open orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get open orders then return 404",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders/open')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3b240041-380b-4dcc-bedd-b7dc9b8df2ea",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get closed orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get closed orders then return 404",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders/closed')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f44d45a4-cb9c-48d3-9d2d-d01946b82770",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get my trades then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get my trades then return 404",
                        "timedOut": false,
                        "duration": 12,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/trades/mine')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b0f038d6-763e-46d2-a273-d72d218fb78c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "b9782a36-23b6-4268-b953-70d85341e120",
                      "83c8da1d-500f-49dd-a69a-3b6cd130f781",
                      "5f2562a7-230a-4928-8ec3-74607554f284",
                      "da5fa919-1b2e-4b85-b302-eb5cb11c1cba",
                      "a797f05e-5601-4563-b910-a6ebe8bc08b9",
                      "3b240041-380b-4dcc-bedd-b7dc9b8df2ea",
                      "f44d45a4-cb9c-48d3-9d2d-d01946b82770",
                      "b0f038d6-763e-46d2-a273-d72d218fb78c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 98,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2021
}